# Azure Pipelines configuration for Playwright TypeScript Framework
# This pipeline runs Playwright tests with Allure reporting

trigger:
  branches:
    include:
      - main
      - develop
      - feature/*
  paths:
    exclude:
      - '*.md'
      - 'docs/**'

pr:
  branches:
    include:
      - main
      - develop

# Pipeline variables
variables:
  NODE_VERSION: '20.x'
  PLAYWRIGHT_BROWSERS_PATH: '0'
  CI: 'true'

# Multi-stage pipeline
stages:
  # Stage 1: Build and Install Dependencies
  - stage: Setup
    displayName: 'Setup and Install Dependencies'
    jobs:
      - job: InstallDependencies
        displayName: 'Install Dependencies'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(NODE_VERSION)

          - task: Cache@2
            displayName: 'Cache npm packages'
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              restoreKeys: |
                npm | "$(Agent.OS)"
              path: '$(System.DefaultWorkingDirectory)/node_modules'

          - script: |
              npm ci
            displayName: 'Install npm dependencies'

          - script: |
              npx playwright install --with-deps
            displayName: 'Install Playwright browsers'

          - script: |
              npx allure --version
            displayName: 'Verify Allure installation'

  # Stage 2: Run Smoke Tests
  - stage: SmokeTests
    displayName: 'Run Smoke Tests'
    dependsOn: Setup
    jobs:
      - job: RunSmokeTests
        displayName: 'Execute Smoke Tests'
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          matrix:
            chromium:
              BROWSER: 'chromium'
            firefox:
              BROWSER: 'firefox'
            webkit:
              BROWSER: 'webkit'
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(NODE_VERSION)

          - task: Cache@2
            displayName: 'Restore npm cache'
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              path: '$(System.DefaultWorkingDirectory)/node_modules'

          - script: |
              npm ci
            displayName: 'Install dependencies'

          - script: |
              npx playwright install --with-deps $(BROWSER)
            displayName: 'Install Playwright $(BROWSER) browser'

          - script: |
              npx playwright test --project=$(BROWSER) --grep="@smoke" --reporter=list,json,junit,html,allure-playwright
            displayName: 'Run Smoke Tests on $(BROWSER)'
            env:
              PLAYWRIGHT_SERVICE_URL: $(PLAYWRIGHT_SERVICE_URL)
              PLAYWRIGHT_SERVICE_ACCESS_TOKEN: $(PLAYWRIGHT_SERVICE_ACCESS_TOKEN)
            continueOnError: true

          - task: PublishTestResults@2
            displayName: 'Publish Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/junit.xml'
              failTaskOnFailedTests: false
              testRunTitle: 'Smoke Tests - $(BROWSER)'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Playwright HTML Report'
            condition: always()
            inputs:
              targetPath: 'playwright-report'
              artifact: 'playwright-report-smoke-$(BROWSER)'
              publishLocation: 'pipeline'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Allure Results'
            condition: always()
            inputs:
              targetPath: 'allure-results'
              artifact: 'allure-results-smoke-$(BROWSER)'
              publishLocation: 'pipeline'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Screenshots'
            condition: always()
            inputs:
              targetPath: 'screenshots'
              artifact: 'screenshots-smoke-$(BROWSER)'
              publishLocation: 'pipeline'

  # Stage 3: Run Critical Tests
  - stage: CriticalTests
    displayName: 'Run Critical Tests'
    dependsOn: Setup
    jobs:
      - job: RunCriticalTests
        displayName: 'Execute Critical Tests'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(NODE_VERSION)

          - task: Cache@2
            displayName: 'Restore npm cache'
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              path: '$(System.DefaultWorkingDirectory)/node_modules'

          - script: |
              npm ci
            displayName: 'Install dependencies'

          - script: |
              npx playwright install --with-deps chromium
            displayName: 'Install Playwright browsers'

          - script: |
              npx playwright test --grep="@critical" --reporter=list,json,junit,html,allure-playwright
            displayName: 'Run Critical Tests'
            env:
              PLAYWRIGHT_SERVICE_URL: $(PLAYWRIGHT_SERVICE_URL)
              PLAYWRIGHT_SERVICE_ACCESS_TOKEN: $(PLAYWRIGHT_SERVICE_ACCESS_TOKEN)
            continueOnError: true

          - task: PublishTestResults@2
            displayName: 'Publish Critical Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/junit.xml'
              failTaskOnFailedTests: false
              testRunTitle: 'Critical Tests'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Playwright HTML Report'
            condition: always()
            inputs:
              targetPath: 'playwright-report'
              artifact: 'playwright-report-critical'
              publishLocation: 'pipeline'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Allure Results'
            condition: always()
            inputs:
              targetPath: 'allure-results'
              artifact: 'allure-results-critical'
              publishLocation: 'pipeline'

  # Stage 4: Run All Tests (Full Suite)
  - stage: FullTests
    displayName: 'Run Full Test Suite'
    dependsOn: 
      - SmokeTests
      - CriticalTests
    condition: succeededOrFailed()
    jobs:
      - job: RunAllTests
        displayName: 'Execute All Tests'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(NODE_VERSION)

          - task: Cache@2
            displayName: 'Restore npm cache'
            inputs:
              key: 'npm | "$(Agent.OS)" | package-lock.json'
              path: '$(System.DefaultWorkingDirectory)/node_modules'

          - script: |
              npm ci
            displayName: 'Install dependencies'

          - script: |
              npx playwright install --with-deps
            displayName: 'Install all Playwright browsers'

          - script: |
              npx playwright test --reporter=list,json,junit,html,allure-playwright
            displayName: 'Run All Tests'
            env:
              PLAYWRIGHT_SERVICE_URL: $(PLAYWRIGHT_SERVICE_URL)
              PLAYWRIGHT_SERVICE_ACCESS_TOKEN: $(PLAYWRIGHT_SERVICE_ACCESS_TOKEN)
            continueOnError: true

          - task: PublishTestResults@2
            displayName: 'Publish Full Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/junit.xml'
              failTaskOnFailedTests: false
              testRunTitle: 'Full Test Suite'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Playwright HTML Report'
            condition: always()
            inputs:
              targetPath: 'playwright-report'
              artifact: 'playwright-report-full'
              publishLocation: 'pipeline'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Allure Results'
            condition: always()
            inputs:
              targetPath: 'allure-results'
              artifact: 'allure-results-full'
              publishLocation: 'pipeline'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Screenshots'
            condition: always()
            inputs:
              targetPath: 'screenshots'
              artifact: 'screenshots-full'
              publishLocation: 'pipeline'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Test Results JSON'
            condition: always()
            inputs:
              targetPath: 'results.json'
              artifact: 'test-results-json'
              publishLocation: 'pipeline'

  # Stage 5: Generate Allure Report
  - stage: GenerateReports
    displayName: 'Generate Test Reports'
    dependsOn: FullTests
    condition: always()
    jobs:
      - job: GenerateAllureReport
        displayName: 'Generate Allure Report'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(NODE_VERSION)

          - script: |
              npm ci
            displayName: 'Install dependencies'

          - task: DownloadPipelineArtifact@2
            displayName: 'Download Allure Results'
            inputs:
              artifact: 'allure-results-full'
              path: '$(System.DefaultWorkingDirectory)/allure-results'

          - script: |
              npx allure generate allure-results --clean -o allure-report
            displayName: 'Generate Allure Report'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Allure Report'
            condition: always()
            inputs:
              targetPath: 'allure-report'
              artifact: 'allure-report'
              publishLocation: 'pipeline'

          - script: |
              echo "##vso[task.setvariable variable=AllureReportUrl]https://dev.azure.com/$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)&view=artifacts"
            displayName: 'Set Allure Report URL'

          - script: |
              echo "Allure Report is available in Artifacts tab"
              echo "$(AllureReportUrl)"
            displayName: 'Display Report Location'

  # Stage 6: Azure Playwright Testing (Cloud)
  - stage: AzureCloudTests
    displayName: 'Azure Cloud Testing'
    dependsOn: Setup
    condition: and(succeeded(), ne(variables['PLAYWRIGHT_SERVICE_URL'], ''))
    jobs:
      - job: RunAzureCloudTests
        displayName: 'Run Tests on Azure Cloud'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: NodeTool@0
            displayName: 'Install Node.js'
            inputs:
              versionSpec: $(NODE_VERSION)

          - script: |
              npm ci
            displayName: 'Install dependencies'

          - script: |
              npm run test:azure
            displayName: 'Run Tests on Azure Playwright Testing'
            env:
              PLAYWRIGHT_SERVICE_URL: $(PLAYWRIGHT_SERVICE_URL)
              PLAYWRIGHT_SERVICE_ACCESS_TOKEN: $(PLAYWRIGHT_SERVICE_ACCESS_TOKEN)
            continueOnError: true

          - task: PublishTestResults@2
            displayName: 'Publish Azure Cloud Test Results'
            condition: always()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/junit.xml'
              failTaskOnFailedTests: false
              testRunTitle: 'Azure Cloud Tests'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Azure Test Results'
            condition: always()
            inputs:
              targetPath: 'test-results'
              artifact: 'azure-cloud-test-results'
              publishLocation: 'pipeline'

