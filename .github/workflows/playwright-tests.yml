name: Playwright Tests CI

on:
  push:
    branches: [ main, master, staging ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      test_tags:
        description: 'Test tags to run (e.g., @smoke, @critical, @critical|@smoke)'
        required: false
        default: '@critical|@smoke'
      workers:
        description: 'Number of parallel workers'
        required: false
        default: '5'

permissions:
  contents: read
  checks: write
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium]
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}
        
      - name: ⚙️ Set environment
        run: |
          if [ "${{ github.event.inputs.environment }}" != "" ]; then
            echo "NODE_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
            echo "RUN=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          else
            echo "NODE_ENV=development" >> $GITHUB_ENV
            echo "RUN=development" >> $GITHUB_ENV
          fi
          
      - name: 🧪 Run Playwright tests
        run: |
          WORKERS="${{ github.event.inputs.workers }}"
          WORKERS="${WORKERS:-5}"
          
          if [ "${{ github.event.inputs.test_tags }}" != "" ]; then
            npx playwright test --project=${{ matrix.browser }} --grep "${{ github.event.inputs.test_tags }}" --workers=$WORKERS --reporter=list,html,json,junit,allure-playwright,github
          else
            npx playwright test --project=${{ matrix.browser }} --grep "@critical|@smoke" --workers=$WORKERS --reporter=list,html,json,junit,allure-playwright,github
          fi
        env:
          CI: true
          RUN: ${{ env.RUN }}
          PLAYWRIGHT_JUNIT_OUTPUT_NAME: junit.xml
          
      - name: 📊 Publish Test Report to GitHub
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Playwright Tests Report - ${{ matrix.browser }}
          path: junit.xml
          reporter: jest-junit
          fail-on-error: false
          
      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            playwright-report/
            test-results/
            allure-results/
            results.json
            junit.xml
            screenshots/
          retention-days: 30
          
      - name: 📝 Generate test summary
        if: always()
        run: |
          echo "## 🧪 Playwright Test Results - ${{ matrix.browser }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- 🌍 Environment: ${{ github.event.inputs.environment || 'development' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🏷️ Tags: ${{ github.event.inputs.test_tags || '@critical|@smoke' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 👥 Workers: ${{ github.event.inputs.workers || '5' }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🎭 Browser: ${{ matrix.browser }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 Check artifacts for detailed HTML, Allure, and JSON reports" >> $GITHUB_STEP_SUMMARY
          
      - name: 💬 Comment PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 🧪 Playwright Test Results - ${{ matrix.browser }}\n\n✅ Tests completed!\n\n**Configuration:**\n- Environment: ${{ github.event.inputs.environment || 'development' }}\n- Tags: ${{ github.event.inputs.test_tags || '@critical|@smoke' }}\n- Workers: ${{ github.event.inputs.workers || '5' }}\n\n[📊 View Full Results](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'
            });

